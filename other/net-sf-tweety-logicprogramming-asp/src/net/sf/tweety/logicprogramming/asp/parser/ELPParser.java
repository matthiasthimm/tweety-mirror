/* Generated By:JavaCC: Do not edit this line. ELPParser.java */
package net.sf.tweety.logicprogramming.asp.parser;

import java.util.*;
import java.util.regex.*;
import net.sf.tweety.logicprogramming.asp.syntax.*;

/**
  * parser for extended logic programs. based
  * on the delp parser from the tweety project,
  * with modifications to load extended logical.
  *
  */
public class ELPParser implements ELPParserConstants {

        public static ELP parse(String filename) throws ParseException,java.io.FileNotFoundException{
                ELPParser parser;
        parser = new ELPParser(new java.io.FileInputStream(filename));
        return parser.Program();
        }

        public static void main(String args[]) {
          try
          {

                System.out.println( parse("test2.elp") );
         } catch (Exception e)
         {
                System.out.println("error while parsing: "+e);
         }
        }

  final public ELP Program() throws ParseException {
        ELP elp = new ELP();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RAUTE:
      case NOT:
      case NAME:
      case 17:
      case 18:
      case 23:
      case 24:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      Expression(elp);
    }
    jj_consume_token(0);
        {if (true) return elp;}
    throw new Error("Missing return statement in function");
  }

  final public void Expression(ELP elp) throws ParseException {
        ELPLiteral lit = null;
        ELPRule r = new ELPRule();
        ELPLiteral b;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RAUTE:
    case NOT:
    case NAME:
    case 23:
    case 24:
      lit = Literal(elp);
                    r.addHead(lit);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PIPE:
        case 16:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 16:
          jj_consume_token(16);
          break;
        case PIPE:
          jj_consume_token(PIPE);
          break;
        default:
          jj_la1[2] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        lit = Literal(elp);
                                  r.addHead(lit);
      }
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
      jj_consume_token(17);
                                  elp.add(r);
      break;
    case 18:
      jj_consume_token(18);
      b = Literal(elp);
                                        r.addBody(b);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 19:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_3;
        }
        jj_consume_token(19);
        b = Literal(elp);
                                        r.addBody(b);
      }
      jj_consume_token(17);
                                        elp.add(r);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public ELPLiteral Literal(ELP elp) throws ParseException {
        ELPAtom atom;
        Token t0,t1,t2;
        SymbolicSet symset;
        String sym_rop, sym_rname;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RAUTE:
      jj_consume_token(RAUTE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
        jj_consume_token(INT);
        jj_consume_token(20);
        t0 = jj_consume_token(NAME);
        jj_consume_token(21);
                  {if (true) return ELPAtom.Int(t0.image);}
        break;
      case MAXINT:
        jj_consume_token(MAXINT);
        jj_consume_token(22);
        t0 = jj_consume_token(NAME);
                                        {if (true) return ELPAtom.Equal("#maxint",t0.image);}
        break;
      case AGGREG:
        t2 = jj_consume_token(AGGREG);
        symset = SymSet(elp);
                        sym_rop = null;
                        sym_rname = null;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMP:
          t0 = jj_consume_token(COMP);
          t1 = jj_consume_token(NAME);
                                sym_rop = t0.image;
                                sym_rname = t1.image;
          break;
        default:
          jj_la1[6] = jj_gen;
          ;
        }
                        {if (true) return ELPAtom.Aggregate(t2.image,symset,sym_rop,sym_rname);}
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case NOT:
      jj_consume_token(NOT);
    {if (true) return new NotLiteral( Literal(elp) );}
      break;
    case NAME:
      atom = Atom(elp);
                {if (true) return atom;}
      break;
    case 23:
    case 24:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 23:
        jj_consume_token(23);
        break;
      case 24:
        jj_consume_token(24);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      atom = Atom(elp);
                {if (true) return new NegLiteral(atom);}
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ELPAtom Atom(ELP elp) throws ParseException {
        Token p,op,t2,t0,t1,t3;
        List<String> terms = new ArrayList<String>();
        String t;
        List<String > ops = new ArrayList<String >();
        boolean aggregate = false;
        SymbolicSet symset = null;
        String sym_rop = null;
        String sym_rname = null;
    p = jj_consume_token(NAME);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMP:
    case 20:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 20:
        jj_consume_token(20);
        t = Term(elp);
                                        terms.add(t);
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 19:
            ;
            break;
          default:
            jj_la1[10] = jj_gen;
            break label_4;
          }
          jj_consume_token(19);
          t = Term(elp);
                                        terms.add(t);
        }
        jj_consume_token(21);
        break;
      case COMP:
        op = jj_consume_token(COMP);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RAUTE:
          jj_consume_token(RAUTE);
          t0 = jj_consume_token(AGGREG);
          symset = SymSet(elp);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMP:
            t1 = jj_consume_token(COMP);
            t2 = jj_consume_token(NAME);
                        sym_rop = t1.image;
                        sym_rname = t2.image;
            break;
          default:
            jj_la1[11] = jj_gen;
            ;
          }
                {if (true) return ELPAtom.Aggregate(t0.image, p.image, op.image, sym_rname, sym_rop, symset);}
          break;
        case NAME:
          t3 = jj_consume_token(NAME);
                ops.add(op.image);
                terms.add(t3.image);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMP:
            op = jj_consume_token(COMP);
            t3 = jj_consume_token(NAME);
                                ops.add(op.image);
                                terms.add(t3.image);
            break;
          default:
            jj_la1[12] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[13] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
          if (ops.size()==0)
          {
                ELPAtom atm = new ELPAtom(p.image,terms.size());
                for (int i = 0; i < terms.size(); i++)
                        atm.setTerm(i,terms.get(i));
                {if (true) return atm;}
                } else if (ops.size() == 1) {

                        String op0 = ops.get(0);
                        if (op0.equalsIgnoreCase("<"))
                                {if (true) return ELPAtom.Less(p.image, terms.get(0));}

                        if (op0.equalsIgnoreCase("<="))
                                {if (true) return ELPAtom.LessEq(p.image, terms.get(0));}

                        if (op0.equalsIgnoreCase("="))
                                {if (true) return ELPAtom.Equal(p.image, terms.get(0));}

                        if (op0.equalsIgnoreCase(">="))
                                {if (true) return ELPAtom.GtrEq(p.image, terms.get(0));}

                        if (op0.equalsIgnoreCase(">"))
                                {if (true) return ELPAtom.Gtr(p.image, terms.get(0));}

                        {if (true) return ELPAtom.UnEq(p.image, terms.get(0));}
                } else if (ops.size() == 2)
                {

                        String op1 = ops.get(1);
                        if (op1.equalsIgnoreCase("+"))
                                {if (true) return ELPAtom.Plus(terms.get(0), terms.get(1), p.image);}

                        {if (true) return ELPAtom.Mul(terms.get(0), terms.get(1), p.image);}
                }
    throw new Error("Missing return statement in function");
  }

  final public SymbolicSet SymSet(ELP elp) throws ParseException {
  SymbolicSet symset = new SymbolicSet();
  ELPAtom atm;
  Token t0;
    jj_consume_token(LBRA);
    t0 = jj_consume_token(NAME);
                        symset.addVariable(t0.image);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 19:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_5;
      }
      jj_consume_token(19);
      t0 = jj_consume_token(NAME);
                    symset.addVariable(t0.image);
    }
    jj_consume_token(COLON);
    atm = Atom(elp);
                  symset.addLiteral(atm);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 19:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_6;
      }
      jj_consume_token(19);
      atm = Atom(elp);
                                symset.addLiteral(atm);
    }
    jj_consume_token(RBRA);
                {if (true) return symset;}
    throw new Error("Missing return statement in function");
  }

  final public String Term(ELP elp) throws ParseException {
        Token t;
    t = jj_consume_token(NAME);
                {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public ELPParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[18];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1864060,0x12000,0x12000,0x1804060,0x80000,0x60000,0x8000,0x380,0x1800000,0x1804060,0x80000,0x8000,0x8000,0x4020,0x108000,0x108000,0x80000,0x80000,};
   }

  /** Constructor with InputStream. */
  public ELPParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ELPParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ELPParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public ELPParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ELPParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public ELPParser(ELPParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ELPParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[25];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 18; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 25; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
