/*
 *  This file is part of "Tweety", a collection of Java libraries for
 *  logical aspects of artificial intelligence and knowledge representation.
 *
 *  Tweety is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License version 3 as
 *  published by the Free Software Foundation.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 *  Copyright 2016 The Tweety Project Team <http://tweetyproject.org/contact/>
 */
 /**
 * JavaCC file
 * parser script for preference orders
 * 
 *
 */options{  JDK_VERSION = "1.6";  STATIC = false;}PARSER_BEGIN(POParser)package net.sf.tweety.preferences.io;import java.io.File;
import java.util.*;import net.sf.tweety.preferences.*;import net.sf.tweety.util.Triple;
@SuppressWarnings("all")public class POParser{
public POParser(){
}
  
  public static PreferenceOrder < String > parse(File file) throws ParseException, java.io.FileNotFoundException
  {
    POParser parser;
    parser = new POParser(new java.io.FileInputStream(file));
    return parser.StringPreferenceOrder();
  }
    public static PreferenceOrder < String > parse(String filename) throws ParseException, java.io.FileNotFoundException  {    POParser parser;    parser = new POParser(new java.io.FileInputStream(filename));    return parser.StringPreferenceOrder();  }  public static void main(String args [])  {    try    {      PreferenceOrder < String > TestPO = new PreferenceOrder < String > ();      // Error with reading in file, path has to be edited manually
      TestPO = parse("test.po");      System.out.println(TestPO);      System.out.println(TestPO.getDomainElements());      TestPO.addPair("g", "h", Relation.LESS);      System.out.println(TestPO.getDomainElements());      System.out.println(TestPO);    }    catch (Exception e)    {      System.out.println("error while parsing: " + e);    }  }}PARSER_END(POParser)SKIP :{  " "}TOKEN :{  < LBRA : "{" >| < RBRA : "}" >| < ELEMENT : ([ "a"-"z", "A"-"Z", "0"-"9" ])+ >| < REL :    "<"  | "<=" >| < EOL :    "\n"  | "\r\n"  | "\t" >}PreferenceOrder < String > StringPreferenceOrder() :{  Token t;  Token t0, t1, t2;  Set < String > singleElements = new HashSet < String > ();  Set < Triple < String, String, Relation > > entries = new HashSet < Triple < String, String, Relation > > ();}{  (    < LBRA >    (      t = < ELEMENT >      {        singleElements.add(t.image);      }      (",")?    )+    < RBRA >  )  < EOL >  (    t0 = < ELEMENT > t2 = < REL > t1 = < ELEMENT >    {      if (t2.image.equals("<="))      {        Triple < String, String, Relation > ent = new Triple < String, String, Relation > (t0.image, t1.image, Relation.LESS_EQUAL);		entries.add(ent);
      }      else if (t2.image.equals("<"))      {        Triple < String, String, Relation > ent = new Triple < String, String, Relation > (t0.image, t1.image, Relation.LESS);		entries.add(ent);
      } else      {        continue;      }          }    < EOL >  )+  {    PreferenceOrder < String > n = new PreferenceOrder < String > (entries);    return n;  }}
