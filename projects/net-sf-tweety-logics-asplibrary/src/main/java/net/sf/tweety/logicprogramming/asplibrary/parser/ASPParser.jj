/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. ASPParser.jj */
/*@egen*/
options {
             
               
                         
  STATIC=false;
}

PARSER_BEGIN(ASPParser)

package net.sf.tweety.logicprogramming.asplibrary.parser;
import java.io.*;
import net.sf.tweety.logicprogramming.asplibrary.syntax.*;
import net.sf.tweety.logicprogramming.asplibrary.util.*;

/** Parser for DLV conform disjunctive logic programs using the
 *	answer set semantics. The parser also provides methods to parse
 *	the answer sets given by the DLV and clasp solver.
 *
 *	The parser is capable of parsing a disjunctive logic program using the following BNF:
 *	- PROGRAM 		:= (RULE|COMMENT)*
 *	- RULE 			:= HEAD (':-' (ELEMENTLST)? )?.
 *	- HEAD 			:= ELEMENT ('v' ELEMENT)*
 *	- ELEMENT 		:= (ATOM|ARITHMETIC|COMPARATIVE)
 *	- ATOM 			:= ('-')? IDENTIFIER ( '(' (TERMLST)? ')')?
 *	- ARITHMETIC	:= (TERM '=' TERM ARITHMETICOP TERM)
 *					|  (ARITHMETICOP '(' TERMLST ')'
 *					|  ('#' IDENTIFIER '(' TERMLST ')'
 *	- COMPARATIVE	:= (COMPAREOP '(' TERM ',' TERM ')) | (TERM COMPAREOP TERM)
 *	- COMPAREOP		:= '<' | '<=' | '=' | '==' | '!=' | '>=' | '>'
 *  - ARITHMETICOP	:= '+' | '-' | '*' | '/'
 *  - TERMLST		:= TERM (',' TERM)*
 *	- TERM			:= SIMPLETERM | NUMBER | SETTERM | LISTTERM
 *	- SIMPLETERM	:= CONSTANT | VARIABLE
 *	- ARIMETHICINT	:= VARIABLE | NUMBER
 *	- SETTERM		:= '{' TERMLST '}' *	- LISTTERM		:= '(' (TERMLST | (TERM '|' TERM )) ')'
 *	- NUMBER		:= (DIGIT)+
 *	- IDENTIFIER	:= VARIABLE | CONSTANT
 *	- VARIABLE		:= ["_", "A"-"Z"] (LETTER)*
 *	- CONSTANT		:= ["a"-"z"] (LETTER)*
 *	- LETTER		:= ["_","a"-"z","A"-"Z"]
 *	- DIGIT			:= ["0"-"9"]
 */
public class ASPParser/*@bgen(jjtree)*/implements ASPParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTASPParserState jjtree = new JJTASPParserState();

/*@egen*/
  private static ASPParser oneThreadParser = new ASPParser(new StringReader(""));

  private static InstantiateVisitor visitor = new InstantiateVisitor();

  public static Program parseProgram(String program) throws ParseException  {
    return parseProgram(new StringReader(program));  }
  
  public static Program parseProgram(Reader reader) throws ParseException  {
    oneThreadParser.ReInit(reader);
    return visitor.visit(oneThreadParser.Program(), null);  }

  public static Rule parseRule(String rule) throws ParseException  {
    return parseRule(new StringReader(rule));  }

  public static Rule parseRule(Reader reader) throws ParseException  {
    oneThreadParser.ReInit(reader);
    return visitor.visit(oneThreadParser.Rule(), null);  }

  public static AnswerSetList parseAnswerSetList(String answerSetList) throws ParseException  {
    return parseAnswerSetList(new StringReader(answerSetList));  }

  public static AnswerSetList parseAnswerSetList(Reader reader) throws ParseException  {
    oneThreadParser.ReInit(reader);
    return visitor.visit(oneThreadParser.AnswerSetList(), null);  }

  public static AnswerSet parseAnswerSet(String answerSet) throws ParseException
  {
    return parseAnswerSet(new StringReader(answerSet));
  }

  public static AnswerSet parseAnswerSet(Reader reader) throws ParseException
  {
    oneThreadParser.ReInit(reader);
    return visitor.visit(oneThreadParser.AnswerSet(), null);
  }
}

PARSER_END(ASPParser)


SKIP :
{
  " "
| "\t"
| "\r"
| "\n"
}

TOKEN : /* OPERATORS */
{
  < IMPL: ":-" >
| < NEG: "-" >
| < SPECIAL_PREFIX: "#" >
| < DEFNOT : "not" >
| < DOT: "." >
| < COMMA: "," >
| < PAR_OPEN: "(" >
| < PAR_CLOSE: ")" >
| < CPAR_OPEN: "[" >
| < CPAR_CLOSE: "]" >
| < PIPE : "|" >
| < ZPAR_OPEN: "{" >
| < ZPAR_CLOSE: "}" >
| < OR: "v" >
}

TOKEN : /* Arithmetic Operators */
{
  < PLUS: "+" >
| < MUL:"*" >
| < DIV:"/" >
}

TOKEN : /* Compare Operators */
{
  < LESS: "<" >
| < LESSEQ: "<=" >
| < GREATER: ">" >
| < GREATEREQ: ">=" >
| < EQUAL: "=" >
| < EQUAL_OLD: "==" >
| < NOTEQUAL: "!=" >
}

TOKEN : /* IDENTIFIERS */
{
  < NUMBER: (< DIGIT >)+ >
| < CONSTANT: ["a"-"z"](<LETTER>|<DIGIT>)* >
| < VARIABLE: ["A"-"Z","_"](<LETTER> | <DIGIT>)* >
| < COMMENT: "%" (~["\n","\r"])* ("\n"|"\r"|"\r\n") >
| < #LETTER: ["_","a"-"z","A"-"Z"] >
| < #DIGIT: ["0"-"9"] >
}

ASTAnswerSetList AnswerSetList()                : {/*@bgen(jjtree) AnswerSetList */
  ASTAnswerSetList jjtn000 = new ASTAnswerSetList(JJTANSWERSETLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AnswerSetList */
  try {
/*@egen*/
  (
    (AnswerSet())*
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

ASTAnswerSet AnswerSet()            : {/*@bgen(jjtree) AnswerSet */
  ASTAnswerSet jjtn000 = new ASTAnswerSet(JJTANSWERSET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AnswerSet */
  try {
/*@egen*/
  < ZPAR_OPEN > (Atom() (< COMMA > Atom())*)? < ZPAR_CLOSE >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}
 
ASTProgram Program()          :
{/*@bgen(jjtree) Program */
  ASTProgram jjtn000 = new ASTProgram(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Program */
  try {
/*@egen*/
  (    Rule()
  |
  	t = < COMMENT >  	{  	}
  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}

ASTRule Rule()       : {/*@bgen(jjtree) Rule */
  ASTRule jjtn000 = new ASTRule(JJTRULE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Rule */
try {
/*@egen*/
(  (Head() (< IMPL > ElementLst())? <DOT >)
| (< IMPL > ElementLst() < DOT >)
)/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return jjtn000;  }/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/}

ASTHead Head()       : {/*@bgen(jjtree) Head */
  ASTHead jjtn000 = new ASTHead(JJTHEAD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Head */
  try {
/*@egen*/
  Atom() (HeadOr() Atom())*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}

ASTElementLst ElementLst()             : {/*@bgen(jjtree) ElementLst */
  ASTElementLst jjtn000 = new ASTElementLst(JJTELEMENTLST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ElementLst */
  try {
/*@egen*/
  Element() ( < COMMA > Element())*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}

ASTAggregate Aggregate()            :
{/*@bgen(jjtree) Aggregate */
  ASTAggregate jjtn000 = new ASTAggregate(JJTAGGREGATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String op1 = "";
  String op2 = "";
}
{/*@bgen(jjtree) Aggregate */
  try {
/*@egen*/
  (    
	(
	  ArithmeticInteger()
	  op1 = CompareOperator()
	  SpecId() SymbolicSet()
	  (op2 = CompareOperator()
	   {
	     if( (op1 != "<" && op1 != "<=") || (op2 != "<" && op2 != "<="))	     {
	       throw new ParseException("In Aggregate ranges only the operators '<' and '<=' are allowed.");	     }
	   }
	   ArithmeticInteger())?
	)
	| 
	(
	 SpecId() SymbolicSet()
	 CompareOperator() ArithmeticInteger() 	)
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}

ASTSymbolicSet SymbolicSet()              :
{/*@bgen(jjtree) SymbolicSet */
  ASTSymbolicSet jjtn000 = new ASTSymbolicSet(JJTSYMBOLICSET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) SymbolicSet */
try {
/*@egen*/
(
  < ZPAR_OPEN > t = <VARIABLE> {jjtn000.addVariable(t.image);}
  (< COMMA > t = <VARIABLE > {jjtn000.addVariable(t.image);})* ":"
  ElementNoAggregate()
  (< COMMA > ElementNoAggregate())* < ZPAR_CLOSE >
)/*@bgen(jjtree)*/
{
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
}
/*@egen*/
{
  return jjtn000;}/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/}
void ElementNoAggregate() : {}
{
  LOOKAHEAD(2)
  Arithmetic() |
  LOOKAHEAD(2)
  Comparative() |
  DefAtom()}


void Element() : {}
{
  (
    LOOKAHEAD(3)
    Aggregate() |
    LOOKAHEAD(2)
	Arithmetic() |
	LOOKAHEAD(2)
  	Comparative() |
    DefAtom() 
  )}

ASTArithmetic Arithmetic()             :
{/*@bgen(jjtree) Arithmetic */
  ASTArithmetic jjtn000 = new ASTArithmetic(JJTARITHMETIC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;}
{/*@bgen(jjtree) Arithmetic */
try {
/*@egen*/
(
  (SpecId() < PAR_OPEN > ArithmeticInteger() (< COMMA > ArithmeticInteger() (< COMMA > ArithmeticInteger())?)? < PAR_CLOSE > ) |
  (ArithmeticInteger() < EQUAL > ArithmeticInteger() ArithmeticOperator() ArithmeticInteger()) |
  (ArithmeticOperator() <PAR_OPEN > ArithmeticInteger() < COMMA > ArithmeticInteger() < COMMA > ArithmeticInteger() < PAR_CLOSE > )
)/*@bgen(jjtree)*/
{
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
}
/*@egen*/
{
  return jjtn000;}/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/}

ASTComparative Comparative()              : {/*@bgen(jjtree) Comparative */
  ASTComparative jjtn000 = new ASTComparative(JJTCOMPARATIVE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Comparative */
try {
/*@egen*/
(
  (SimpleTerm() CompareOperator() SimpleTerm()) |
  (CompareOperator() <PAR_OPEN > SimpleTerm() < COMMA > SimpleTerm() < PAR_CLOSE >)
)/*@bgen(jjtree)*/
{
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
}
/*@egen*/
{
  return jjtn000;}/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/}

ASTDefAtom DefAtom()          : {/*@bgen(jjtree) DefAtom */
  ASTDefAtom jjtn000 = new ASTDefAtom(JJTDEFATOM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DefAtom */
  try {
/*@egen*/
  (< DEFNOT >{jjtn000.setDefNeg(true);})? Atom()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {
    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}


ASTAtom Atom()       : {/*@bgen(jjtree) Atom */
  ASTAtom jjtn000 = new ASTAtom(JJTATOM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Atom */
  try {
/*@egen*/
  
  (
    (< NEG >{jjtn000.neg(true);})? Identifier() (< PAR_OPEN > (TermLst())? < PAR_CLOSE >)?
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}

ASTFunctionalTerm FunctionalTerm()                 :
{/*@bgen(jjtree) FunctionalTerm */
  ASTFunctionalTerm jjtn000 = new ASTFunctionalTerm(JJTFUNCTIONALTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) FunctionalTerm */
  try {
/*@egen*/
  (t = < CONSTANT > < PAR_OPEN > TermLst() <PAR_CLOSE >)/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.setFunctor(t.image);
    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}

ASTSetTerm SetTerm()          : {/*@bgen(jjtree) SetTerm */
  ASTSetTerm jjtn000 = new ASTSetTerm(JJTSETTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SetTerm */
  try {
/*@egen*/
  ( < ZPAR_OPEN > ( TermLst())? < ZPAR_CLOSE > )/*@bgen(jjtree)*/
{
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
}
/*@egen*/
{
  return jjtn000;}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}

ASTListTail ListTail()           :
{/*@bgen(jjtree) ListTail */
  ASTListTail jjtn000 = new ASTListTail(JJTLISTTAIL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t = null;
}
{/*@bgen(jjtree) ListTail */
  try {
/*@egen*/
  (
    t = < VARIABLE > | ListTerm()  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    if(t != null)
    {
      jjtn000.setVariableName(t.image);
    }
    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
  }

ASTListTerm ListTerm()           : {/*@bgen(jjtree) ListTerm */
  ASTListTerm jjtn000 = new ASTListTerm(JJTLISTTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ListTerm */
  try {
/*@egen*/
  < CPAR_OPEN >
  (    Term()
    (
      ( < PIPE > ListTail()) 
    | ( (< COMMA > Term())*)    )
  )?
  < CPAR_CLOSE >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}

ASTTermLst TermLst()          : {/*@bgen(jjtree) TermLst */
  ASTTermLst jjtn000 = new ASTTermLst(JJTTERMLST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TermLst */
  try {
/*@egen*/
  Term() ( < COMMA > Term() )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}

ASTTerm Term()       : {/*@bgen(jjtree) Term */
  ASTTerm jjtn000 = new ASTTerm(JJTTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Term */
  try {
/*@egen*/
  ( LOOKAHEAD(2)    FunctionalTerm() | SimpleTerm() | SetTerm() | ListTerm()
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  
  {
    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}

ASTSimpleTerm SimpleTerm()             : {/*@bgen(jjtree) SimpleTerm */
  ASTSimpleTerm jjtn000 = new ASTSimpleTerm(JJTSIMPLETERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SimpleTerm */
  try {
/*@egen*/
  (Identifier() | Number())/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    
    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}

ASTArithmeticInteger ArithmeticInteger()                    :
{/*@bgen(jjtree) ArithmeticInteger */
  ASTArithmeticInteger jjtn000 = new ASTArithmeticInteger(JJTARITHMETICINTEGER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t=null;
}
{/*@bgen(jjtree) ArithmeticInteger */
  try {
/*@egen*/
  (t = < VARIABLE > | Number())/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    if(t != null)    {      jjtn000.setVariableName(t.image);
    }
    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}

void Number()         :
{/*@bgen(jjtree) Number */
  ASTNumber jjtn000 = new ASTNumber(JJTNUMBER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;}
{/*@bgen(jjtree) Number */
  try {
/*@egen*/
  t=< NUMBER >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.setNumber(t.image);  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}

void HeadOr() : {}
{
  < OR >}

void IdentifierLst()        : {/*@bgen(jjtree) IdLst */
  ASTIdLst jjtn000 = new ASTIdLst(JJTIDLST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IdLst */
  try {
/*@egen*/  Identifier() ( < COMMA > Identifier() )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}

void SpecId()         : {/*@bgen(jjtree) SpecId */
  ASTSpecId jjtn000 = new ASTSpecId(JJTSPECID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SpecId */
  try {
/*@egen*/
  (< SPECIAL_PREFIX > Identifier())/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}

void Identifier()             :
{/*@bgen(jjtree) Identifier */
  ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Identifier */
  try {
/*@egen*/
  (
    (t=<CONSTANT>)
  |
  	(t=<VARIABLE >)
  	{
  	  jjtn000.setVariable(true);  	}
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.setName(t.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String CompareOperator()            : {/*@bgen(jjtree) CompareOp */
  ASTCompareOp jjtn000 = new ASTCompareOp(JJTCOMPAREOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CompareOp */
  try {
/*@egen*/
  (< LESS > | < LESSEQ > | < EQUAL > | < EQUAL_OLD > | < NOTEQUAL > | < GREATER > | < GREATEREQ >)/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.setOperator(this.token.image);
    return this.token.image;  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}

String ArithmeticOperator()               : {/*@bgen(jjtree) ArithmeticOp */
  ASTArithmeticOp jjtn000 = new ASTArithmeticOp(JJTARITHMETICOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArithmeticOp */
  try {
/*@egen*/
  (< PLUS > | < NEG > | < MUL > | < DIV >)/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.setOperator(this.token.image);
    return this.token.image;  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}