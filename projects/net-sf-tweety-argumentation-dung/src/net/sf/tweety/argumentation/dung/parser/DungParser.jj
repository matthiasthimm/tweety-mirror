/**
 * JavaCC file
 */

options {
  JDK_VERSION = "1.6";
}

PARSER_BEGIN(DungParser)
package net.sf.tweety.argumentation.dung.parser;

import java.io.*;
import net.sf.tweety.*;
import net.sf.tweety.argumentation.dung.*;
import net.sf.tweety.argumentation.dung.syntax.*;

/**
  * This class implements a parser for dung argumentation theories. The BNF for dung abstract
  * argumentation theory files is given by (start symbol is THEORY)
  * <br>
  * <br>THEORY 			::== (EXPRESSION)*
  * <br>EXPRESSION		::== ARGUMENT | ATTACK
  * <br>ARGUMENT		::== "argument(" + ARGUMENT_NAME + ")."
  * <br>ATTACK			::== "attack(" + ARGUMENT_NAME + "," + ARGUMENT_NAME + ")."
  * <br>
  * <br>ARGUMENT_NAME is a sequence of symbols from {a,...,z,A,...,Z,0,...,9,_,-,(,),[,],{,},~,<,>,.} with a letter at the beginning.
  */
public class DungParser extends Parser {

	public DungParser(){		
	}

  	public DungTheory parseBeliefBase(Reader reader) throws ParserException{
  	  	try  	  	{  	  		DungParser theParser = new DungParser(reader);
  	  		return theParser.Theory();
  	 	}catch(ParseException e){
			throw new ParserException(e);
  	 	}  	 	  
  	}

  	public Formula parseFormula(Reader reader) throws ParserException{
  		try{  		  	DungParser theParser = new DungParser(reader);
  	  		return theParser.SingleFormula();
  		}catch(ParseException e){
			throw new ParserException(e);
  	 	}	}	  

}

PARSER_END(DungParser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  < ARGUMENT_NAME: ["a"-"z","A"-"Z","_"] ( ["a"-"z","A"-"Z","_","-","0"-"9","{","}","~","<",">"] )* >
}

DungTheory Theory() :
{
	DungTheory dungTheory = new DungTheory();
}
{
  ( Expression(dungTheory) )* <EOF>
  {
  	return dungTheory;
  }
}

Formula SingleFormula() :
{
	Formula f;
}
{
	f=SingleArgument() | f=SingleAttack()
	{		return f;
	}
}

void Expression(DungTheory dungTheory) :
{}
{
	Argument(dungTheory) | Attack(dungTheory)
}

void Argument(DungTheory dungTheory) :
{
	Token argumentName;
}
{
	"argument(" argumentName=<ARGUMENT_NAME> ")."
	{
			Argument argument = new Argument(argumentName.image);
			dungTheory.add(argument);
	}
}

Argument SingleArgument() :
{	Token argumentName;
}
{	"argument(" argumentName=<ARGUMENT_NAME> ")"  | argumentName=<ARGUMENT_NAME >
	{
			return new Argument(argumentName.image);			
	}
}

Attack SingleAttack() :
{
	Token attackerName;
	Token attackedName;
}
{
	"attack(" attackerName=<ARGUMENT_NAME> "," attackedName=<ARGUMENT_NAME> ")" | "(" attackerName=<ARGUMENT_NAME> "," attackedName=<ARGUMENT_NAME> ")" 
	{
		Argument attacker = new Argument(attackerName.image);
		Argument attacked = new Argument(attackerName.image);
		return new Attack(attacker,attacked);
	}
}

void Attack(DungTheory dungTheory) :
{
	Token attackerName;
	Token attackedName;
}
{
	"attack(" attackerName=<ARGUMENT_NAME> "," attackedName=<ARGUMENT_NAME> ")."
	{
		Argument attacker = new Argument(attackerName.image);
		Argument attacked = new Argument(attackerName.image);
		if(!dungTheory.contains(attacker) || !dungTheory.contains(attacked))
			throw new ParseException("undefined argument in attack relation.");
		dungTheory.add(new Attack(attacker,attacked));
	}
}
